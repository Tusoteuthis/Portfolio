{
  
    
        "post0": {
            "title": "Testing",
            "content": "Testing . Testing in Excel-VBA is limited to a preinstalled debugging tool, that only allows for unit tests for specified code snippets. . The common way of testing is described in the follow in section: . Strat the development environment by hitting alt + F11. Then navigate to “debugger” . | Click anywhere in the VBA editor. . | To step-by-step test your code, hit F8 . | By hitting F5 the code is executed entirely . | While Excel does not directly allow for data import validation from SQL Servers, rudimentary tests can be developed, if it is known that the data set does not change much trough the cycle in terms of size, quantity, etc. For instance, row and column counts, checksums or missing values can serve as indicators for data set completeness. Such tests are highly useful, and it is advised to incorporate them. However, they require specific data base know-how, which is often hard to come by. .",
            "url": "https://tusoteuthis.github.io/Portfolio/2020/08/13/Testing.html",
            "relUrl": "/2020/08/13/Testing.html",
            "date": " • Aug 13, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Logging",
            "content": "Logging . Log files are not only useful from a developer’s perspective, but also when delicate, high-stake data is processed. Excel allows you to keep logs in form of text files, containing information such as date, time and other details . The following process outlines how to create log files within Excel: . Start VBA development environment (alt + F11) . | Navigate to Insert and choose Module . | Copy the following code: . | . Copy the following code in your current workbook module: | Private Sub Workbook_Open() . LogInformation ThisWorkbook.Name &amp; “ opened by “ &amp; _ . Application.UserName &amp; “ “ &amp; Format(Now, “yyyy-mm-dd hh:mm”) . End Sub .",
            "url": "https://tusoteuthis.github.io/Portfolio/2020/08/13/Logging.html",
            "relUrl": "/2020/08/13/Logging.html",
            "date": " • Aug 13, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Data Science Architecture",
            "content": "Data-Science-Architecture . What kind of data science architecture would be right for your project? . Microsoft Excel in combination with VBA falls in two categories: Notebook and Dashboard. . It can be considered a notebook-architecture, due to the VBA development framework provided by Excel. One could argue that there are parallels between classical notebook-architecture such as Jupyter or Rmarkdown. . On the other side, Excel provides a myriad of functionalities to graphically illustrate data. . This combination is perhaps one of the reasons why Excel is still widely used in the industry and ultimately why I chose to grapple with the topic. . What could this look like? . The final excels automatically updates its data base periodically. Since client relevant variables are chosen automatically and pivot tables and graphs are predetermining, the user sees only information that is relevant to him respectively can navigate (and click) through the familiar interface. . Why not a different approach? . End user lack familiarity with other tool or programs that require basic know programming knowledge such as Python or R. The reasons are multifold, and, among others, include: . High switching cost to change from one system to another (training staff costs money) lock in effect . | High share of long-serving employees who are reluctant to learn something new . | General unwillingness to change established structures . | Politically motivated reasons. . | . How could pipelines be used? . Pipelines are not applicable for the use case at hand .",
            "url": "https://tusoteuthis.github.io/Portfolio/2020/08/13/Data-Science-Architecture.html",
            "relUrl": "/2020/08/13/Data-Science-Architecture.html",
            "date": " • Aug 13, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Architecture",
            "content": "System Architecture . Given the problem description, with its scattered systems and services, the current portfolio builds on a micro service architecture. Fundamentally, micro service architectures enable you to develop based on smaller monofunctional modules (the microservices). The components themselves are developed independently of one another and together form the overall product. This style of architecture has several advantages: . Independence – flat hirachical development structure; teams work independently and are able to use different programming languages; Robustness – Due to the fact that several teams work independently to develop a unified application, results tend to be more resilient against micro service failure. This is related to a continuous delivery approach, where new developments of a microservice are delivers directly, after thorough testing, regardless of the remaining processes. . | Compatibility – Finally all building blocks are put together. REST-APIs (or similar services) enable an easy exchange of information. . | Scalability – It enables developers to scale individual services according to their needs. This also keeps the end product lean and saves resources. . | . Taken together, micro service architecture perfectly fit the needs to automate and standardize processes in large corporations. In particular, the flexibility of such a system is a huge advantage. . Context-View . The Context-View is concerned with use cases or application scenarios. These describe workflows between components or processes and aim to identify or illustrate architectural elements weak points. They also serve as a starting point for initial architecture tests or implementation drafts. Use case diagram are used for illustration. The following diagram should illustrate the use case for the problem at hand: . . Modul-View . The Modul-View is concerned with functionality of end-user-systems. Various UML diagrams are used for representation, including class diagrams, communication diagrams, and sequence diagrams as well as component diagram or package diagram. For problem at problem at hand, the end user controls the application via excel (mostly the communication with the SQL Server) . Runtime-View . The Runtime-View is concerned with the dynamic aspects a system. It clarifies processes of systems and how they communicate with regards to runtime behavior. This view describes parallelism, distribution, integration, performance and scalability. The corresponding UML diagrams include i.e. activity diagrams. Most critical for the system is a successful database query. The diagram depicted under “Context-View” illustrates the system behavior if the query fails. . Distribution-View . The Distribution-View describes systems from system architect’s point of view. This view is concerned with the distribution of software components on a physical level (i.e. the assignment of these hardware parts) and the communication between these components. The associated UML diagram is the distribution diagram. It is safe to assume that data bases, relevant systems as well as desktops with Excel installed are already in place. Thus, this portfolio builds on this infrastructure. .",
            "url": "https://tusoteuthis.github.io/Portfolio/2020/08/13/Architecture.html",
            "relUrl": "/2020/08/13/Architecture.html",
            "date": " • Aug 13, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Requirement Engineering",
            "content": "Requirements . The SOPHIST set of rules is based on developments in the sphere of neuro-liguistic programming (NLP), which a method used in psychotherapy that tries to uncover people’s thoughts through a targeted questioning technique. One major assumption behind NPS is that people perceive their environment selectively. Through a process called transformation people create a simplified model of their mental imagination to create their personal reality. . A new transformation processes is triggered if people are promoted or asked about their perception. This is referred to as linguistic effects. Three mechanism can occur in both transformation-dimension: Deletion, Generalization and Distortion: . Deletion is an indicator of incomplete information. This happens, for example, when we subconsciously withhold information that we take for granted. . | Generalization is an indicator of faulty generalizations. It often happens that we generalize unique experiences and draw wrong conclusions from them. . | Distortion indicates a statement of falsified reality. It is a tactic to better fit reality to our imagination. . | . Each of these mechanisms lead to consequences that personal reality or linguistic expression does not correspond with reality. The NLP approach ais to the transformation of the linguistic utterance and thus to determine personal reality. The SOPHIST set of rules applies this knowledge to requirements engineering in order to determine requirements in their true nature. . The SOPHIST set of rules comprises 25 rules with which requirements can be examined. The rules are structured according to the three transformation categories, with additional linguistic rules added to ensure that requirements are understandable and unambiguous. . In the context of requirement engineering and according to material covered during lectures, the following rules are most fitting for this purpose: . Rule Nr. Essence . 1 | Write every requirement in active voice | . 2,3,4 | Analyze processes and express them using main verbs | . 6 | Analyze missing information on the process verb | . 10,12 | Clarify amounts and frequencies | . 17 | Clarify missing conditions | . Further information regarding rules can be found here: https://de.scribd.com/document/204207076/6-Requirements-Engineering-and-Management-the-SOPHIST-Set-of-REgulations .",
            "url": "https://tusoteuthis.github.io/Portfolio/2020/08/08/Requirement-Engineering.html",
            "relUrl": "/2020/08/08/Requirement-Engineering.html",
            "date": " • Aug 8, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "Data Acquisition",
            "content": "Data-Acquisition . As already outlined in the problem description, Excel is still the working horse in many companies. And, how could it be otherwise, the same companies that heavily relay on Excel use the classic among databases: relational databases. Thus, it is necessary to embed SQL statement into the VBA framework as a starting point. The table below shows a potential data format in an relations format (note that is possible to have missing values or duplicates): . var name var name var name var name var name . varchar() |   | float() | date() |   | . varchar() | char() |   | date() | int() | . varchar() | char() |   | date() |   | . varchar() | char() | float() | date() | int() | . varchar() | char() | float() | date() |   | . varchar() | char() | float() | date() | int() | . Here is an example of a data base connection: . Fire up excel and hit Alt+F11 . | Select Microsoft Activex Data Objects Library . | Create a sup procedure and start coding: . Establish data base connection | | Dim sSQLQry As String . Dim ReturnArray . Dim Conn As New ADODB.Connection . Dim mrs As New ADODB.Recordset . Dim DBPath As String, sconnect As String . DBPath = ThisWorkbook.FullName ‘Refering the sameworkbook as Data Source . ‘You can provide the full path of your external file as shown below . ‘DBPath =”C: InputData.xlsx” . sconnect = “Provider=MSDASQL.1;DSN=Excel Files;DBQ=” &amp; DBPath &amp; “;HDR=Yes’;” . ‘If any issue with MSDASQL Provider, Try the Microsoft.Jet.OLEDB: . ‘sconnect = “Provider=Microsoft.Jet.OLEDB.4.0;Data Source=” &amp; DBPath _ . &amp; “;Extended Properties=”“Excel 8.0;HDR=Yes;IMEX=1””;” . Connect to data base | Conn.Open sconnect . Specify your SQL query | sSQLSting = “SELECT * From [Sheet1$]” ‘ Your SQL Statement (Table Name= Sheet Name=[Sheet1$]) . Fetching data | mrs.Open sSQLSting, Conn . Define where you want to add you data | Sheet2.Range(“A2”).CopyFromRecordset mrs . Disconnect from data base | Close Recordset . mrs.Close . ‘Close Connection . Conn.Close . One common use case it to update the data basis periodically. This can be achieved by inserting the following code snippet: . ActiveWorkbook.Connections(“test”).Refresh ‘Refresh only the connection named “test” . ActiveWorkbook.RefreshAll ‘Refresh all connections .",
            "url": "https://tusoteuthis.github.io/Portfolio/2020/08/08/Data-Acquisition.html",
            "relUrl": "/2020/08/08/Data-Acquisition.html",
            "date": " • Aug 8, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "Problem Desciption",
            "content": "Problem Desciption . Data Science, a topic described by some to be the sexiest job in the 21st century (source: https://apps.derstandard.at/privacywall/story/2000088978702/sexiest-job-data-scientist). Defined as interdisciplinary field of science that overlaps with techniques and theories from the subjects of mathematics, statistics and information technology, including signal processing, uses probability models of machine learning, statistical learning, programming, data technology, pattern recognition, forecasting, uncertainty modeling and data storage, it is virtually impossible to master all these fiedls. . Data Scientist working in the industry often need to develop tools and applications that are used by others, less versed employees (in terms of IT and program know how). Further, corporate restrictions and limitations concerning availability of tools can be limited, due to policy or security reasons (or both). Under such circumstances Microsoft’s old battle axe “Excel” is often the one and only resort. Even there, developers are stripped off programming alternatives, since Excel Macros are based on Visual Basic for Applications (VBA) which is a downgraded version of Visual Basic. . Given these circumstances, I decided to go deeper this disconcerting, old fashioned topic. My goal is to develop a usable VBA Code, that fullfills the following requirements. . Shippable to an unlimited amount of users . | Automated update of data basis. . | Automated update of pivot tabels . | Automated selection of client relevant variabels. . | Automated duplication of file if data basis is updated. . | .",
            "url": "https://tusoteuthis.github.io/Portfolio/2020/08/07/Problem-Desciption.html",
            "relUrl": "/2020/08/07/Problem-Desciption.html",
            "date": " • Aug 7, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://tusoteuthis.github.io/Portfolio/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://tusoteuthis.github.io/Portfolio/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}